//
//  MentorsScreenWorker.swift
//  ITmentors
//
//  Created by Alexey Vadimovich on 27.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseFirestore
import FirebaseStorage
import Firebase
class MentorsScreenWorker {
    func getMentorsList(completionn: @escaping ([MentorCellModel]) -> (), error: @escaping () -> ()){
        var arrayOfMentors: [MentorCellModel] = []
        
        let ref = Firestore.firestore().collection("Mentors")
        
        var arrayfOfDocsFromWhereWeNeedToGetMentorsInfo: [QueryDocumentSnapshot?] = []
        
        ref.getDocuments { (documents, err) in
            guard err == nil else {error(); return}
            guard let documentss = documents else {error(); return}
            arrayfOfDocsFromWhereWeNeedToGetMentorsInfo = documentss.documents
            
            let numberOfMentors = documentss.count
            
            for (int, docc) in arrayfOfDocsFromWhereWeNeedToGetMentorsInfo.enumerated(){
                guard let docc = docc else {continue}
                
                let data = docc.data()
//                should be minimun one mentor
                let isMentoring = data["IsMentoring"] as? Bool?
                let name = data["Name"] as? String
                let description = data["Description"] as? String
                let shortDescription = data["ShortDescription"] as? String
                let messageLink = data["MessageLink"] as? String
                let shortUUID = data["AppleUUID"] as? String
                let languages = data["Languages"] as? [String]
                
                let group = DispatchGroup()
                
                var imageData: Data?
                
                group.enter()
                FirebaseImageService.loadImage(userID: shortUUID ?? "") {imgData in
                    imageData = imgData
                    group.leave()
                }
            
                group.notify(queue: .main){
                    if isMentoring != false  {
                        let newMentor = MentorCellModel(name: name, discription: description, shortDiscription: shortDescription, imageData: imageData, languages: LanguageNameToEnumType.from(languages ?? []), messageLink: messageLink, ShortUUID: shortUUID)

                        print(LanguageNameToEnumType.from(languages ?? []))
                        arrayOfMentors.append(newMentor)
                        

                        if int + 1 == numberOfMentors{
                            completionn(arrayOfMentors)
                        }

                    }
                }
            }

            
        }
    }

}
