//
//  ProfileScreenViewController.swift
//  ITmentors
//
//  Created by Alexey Vadimovich on 27.09.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileScreenDisplayLogic: AnyObject {
    func showAuthOrFillInfoScreen(viewModel: ProfileScreen.chekcAuthAndDataFill.ViewModel?)
    func loadYourInfo(viewModel: ProfileScreen.loadYourDataa.ViewModel)
    func accountMentoringStatusChanges(viewModel: ProfileScreen.ChangeMentoringStatus.ViewModel)
    func accountDeleted()
}

class ProfileScreenViewController: UIViewController, ProfileScreenDisplayLogic {
    
    var interactor: ProfileScreenBusinessLogic?
    var router: (NSObjectProtocol & ProfileScreenRoutingLogic & ProfileScreenDataPassing)?
    
    var data: ProfileScreen.loadYourDataa.ViewModel?
    
    private lazy var presentationView: ProfileScreenView = {
        let view = ProfileScreenView()
        view.delegate = self
        return view
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        ProfileMentorConfigurator.shared.configure(with: self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        ProfileMentorConfigurator.shared.configure(with: self)
    }
    
    
    // MARK: View lifecycle
    override func loadView() {
        super.loadView()
        view = presentationView
        
        loadYourData()
        showRegistationScreenIfNeeded()
    }
    override func viewWillAppear(_ animated: Bool) {
        let menuButtonImage = UIImage(systemName: "gear")?.withTintColor(.AppPalette.thirdElementColor, renderingMode: .alwaysOriginal)
        let menuButton = UIBarButtonItem(image: menuButtonImage, style: .plain, target: self, action: #selector(showActionsSheet))
        navigationItem.rightBarButtonItem = menuButton
    }
    
    
    // MARK: To interactor
    private func loadYourData(){
        interactor?.getYourData()
    }
    
    private func showRegistationScreenIfNeeded() {
        interactor?.showAuthScreenIfNeeded()
    }
    private func deleteAccount(){
        interactor?.deleteAccount()
    }
    private func changeMentoringStatus(){
        interactor?.changeMentoringStatus()
    }
    
    //MARK: - from presenter
    func showAuthOrFillInfoScreen(viewModel: ProfileScreen.chekcAuthAndDataFill.ViewModel?) {
        guard let vcWeNeedToShow = viewModel?.viewControllerWeNeedToShow else {return}
        if vcWeNeedToShow is SignInWithAppleViewController {
            router?.navigateToSingInViewController(source: self, destination: vcWeNeedToShow as! SignInWithAppleViewController)
        }
        else if vcWeNeedToShow is FillDataViewController {
            router?.navigateToFillDataViewController(source: self, destination: vcWeNeedToShow as! FillDataViewController)
        }
    }
    
    func loadYourInfo(viewModel: ProfileScreen.loadYourDataa.ViewModel) {
//        prese data = viewModel
        presentationView.viewModel = viewModel
        data = viewModel
    }
    func accountMentoringStatusChanges(viewModel: ProfileScreen.ChangeMentoringStatus.ViewModel) {
        data?.isMentoring = viewModel.changedTo
    }
    
    func accountDeleted() {
        showRegistationScreenIfNeeded()
    }
    
    
    private let editProfileButton: UIBarButtonItem = {
        let b = UIBarButtonItem(barButtonSystemItem: .edit, target: self, action: #selector(showActionsSheet))
        b.tintColor = .AppPalette.thirdElementColor
        return b
    }()
    
    @objc private func showActionsSheet(){
        var currectMentoringStatusText: String {
            if data?.isMentoring == true || data?.isMentoring == nil{
                return "Прекратить менторство"
            } else {
                return "Продолжить менторство"
            }
        }
        var currectMentoringStatusStyle: UIAlertAction.Style{
            if data?.isMentoring == true || data?.isMentoring == nil{
                return .destructive
            } else {
                return .default
            }
        }

        let alert = UIAlertController(title: "Настройки", message: "", preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "Изменить информацию", style: .default , handler:{ [unowned self] actionn in
            let editVC = FillDataViewController()
            guard let data = data else {return}
            router?.navigateToEditDataViewController(source: self, destination: editVC, withData: data)
        }))
        alert.addAction(UIAlertAction(title: currectMentoringStatusText, style: currectMentoringStatusStyle , handler:{ [unowned self] actionn in
            changeMentoringStatus()
        }))
        alert.addAction(UIAlertAction(title: "Удалить аккаунт", style: .destructive , handler:{ [unowned self] actionn in
            deleteAccount()
        }))
        alert.addAction(UIAlertAction(title: "Закрыть", style: .cancel))
        
        present(alert, animated: true)
    }
    
    
    
}


extension ProfileScreenViewController{
    func updateScreenAfterDataFilling(){
        loadYourData()
    }
}

extension ProfileScreenViewController: ProfileScreenViewDelegate{
    
}
